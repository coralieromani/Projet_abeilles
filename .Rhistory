plot(0:1,c(1,rep(0,1)),col=2,type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation",main="autocorrélation empirique", col="blue", xlab = "h")
par(mfrow=c(1,2))
plot(0:1,c(1,rep(0,1)),col=2,type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation",main="autocorrélation empirique", col="blue", xlab = "h")
par(mfrow=c(1,2))
#plot(0:1,c(1,rep(0,1)),col=2,type='h',main="autocorrélation théorique",xlab='h',
#ylab=expression(rho[Xt1](h)))
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation",main="autocorrélation empirique", col="blue", xlab = "h")
par(mfrow=c(1,2))
#plot(0:1,c(1,rep(0,1)),col=2,type='h',main="autocorrélation théorique",xlab='h',
#ylab=expression(rho[Xt1](h)))
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", lag.max = 10, main="autocorrélation empirique", col="blue", xlab = "h")
par(mfrow=c(1,2))
#plot(0:1,c(1,rep(0,1)),col=2,type='h',main="autocorrélation théorique",xlab='h',
#ylab=expression(rho[Xt1](h)))
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", main="autocorrélation empirique", col="blue", xlab = "h")
N <- 1000
theta <- -1/3
Z1 <- rnorm(N+1)
Xt1 <- Z1[2:(N+1)] + theta*Z1[1:N]
plot.ts(Xt1)
p <- 1
init <- 2
phi <- 0.9
N0 <- 300
set.seed(1234)
Z2 <- rnorm(N+N0,0,1)
Xt2 <- numeric (N+N0)
Xt2[1] <- init
for (t in 2:(N+N0)) {
Xt2[t] <- phi * Xt2[t-1] + Z2[t]
}
#X2_final <- Xt2[(N0+1):(N0+N)]
plot.ts(Xt2)
parametres1 = list(ma=c(-1/3))
Xt3=arima.sim(model=parametres1,n=1000,rand.gen=rnorm)
plot.ts(Xt3)
parametres2 = list(ar=c(0.9))
Xt4=arima.sim(model=parametres2,n=1000,rand.gen=rnorm)
plot.ts(Xt4)
parametres3 = list(ma=c(-12,12,144))
Xt5=arima.sim(model=parametres3,n=1000,rand.gen=rnorm)
plot.ts(Xt5)
parametres4 = list(ar=c(1/3, 1/2))
Xt6=arima.sim(model=parametres4,n=1000,rand.gen=rnorm)
plot.ts(Xt6)
parametres5 = list(ma = c(1), ar=c(0.9))
Xt7=arima.sim(model=parametres5,n=1000,rand.gen=rnorm)
plot.ts(Xt7)
par(mfrow=c(1,2)) #fenêtre graphique scindé en 2
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", main="autocorrélation empirique", col="blue", xlab = "h")
N <- 1000
theta <- -1/3
Z1 <- rnorm(N+1)
Xt1 <- Z1[2:(N+1)] + theta*Z1[1:N]
plot.ts(Xt1)
p <- 1
init <- 2
phi <- 0.9
N0 <- 300
set.seed(1234)
Z2 <- rnorm(N+N0,0,1)
Xt2 <- numeric (N+N0)
Xt2[1] <- init
for (t in 2:(N+N0)) {
Xt2[t] <- phi * Xt2[t-1] + Z2[t]
}
#X2_final <- Xt2[(N0+1):(N0+N)]
plot.ts(Xt2)
parametres1 = list(ma=c(-1/3))
Xt3=arima.sim(model=parametres1,n=1000,rand.gen=rnorm)
plot.ts(Xt3)
parametres2 = list(ar=c(0.9))
Xt4=arima.sim(model=parametres2,n=1000,rand.gen=rnorm)
plot.ts(Xt4)
parametres3 = list(ma=c(-12,12,144))
Xt5=arima.sim(model=parametres3,n=1000,rand.gen=rnorm)
plot.ts(Xt5)
parametres4 = list(ar=c(1/3, 1/2))
Xt6=arima.sim(model=parametres4,n=1000,rand.gen=rnorm)
plot.ts(Xt6)
parametres5 = list(ma = c(1), ar=c(0.9))
Xt7=arima.sim(model=parametres5,n=1000,rand.gen=rnorm)
plot.ts(Xt7)
par(mfrow=c(1,2)) #fenêtre graphique scindé en 2
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", main="autocorrélation empirique", col="blue", xlab = "h")
parametres9 = list(ma=c(-2,5,-1))
Xt = arima.sim(model=parametres9,n=1000, rand.gen=rnorm)
acf(Xt,type="correlation",main="autocorrélation empirique")
N <- 1000
theta <- -1/3
Z1 <- rnorm(N+1)
Xt1 <- Z1[2:(N+1)] + theta*Z1[1:N]
plot.ts(Xt1)
p <- 1
init <- 2
phi <- 0.9
N0 <- 300
set.seed(1234)
Z2 <- rnorm(N+N0,0,1)
Xt2 <- numeric (N+N0)
Xt2[1] <- init
for (t in 2:(N+N0)) {
Xt2[t] <- phi * Xt2[t-1] + Z2[t]
}
#X2_final <- Xt2[(N0+1):(N0+N)]
plot.ts(Xt2)
parametres1 = list(ma=c(-1/3))
Xt3=arima.sim(model=parametres1,n=1000,rand.gen=rnorm)
plot.ts(Xt3)
parametres2 = list(ar=c(0.9))
Xt4=arima.sim(model=parametres2,n=1000,rand.gen=rnorm)
plot.ts(Xt4)
parametres3 = list(ma=c(-12,12,144))
Xt5=arima.sim(model=parametres3,n=1000,rand.gen=rnorm)
plot.ts(Xt5)
parametres4 = list(ar=c(1/3, 1/2))
Xt6=arima.sim(model=parametres4,n=1000,rand.gen=rnorm)
plot.ts(Xt6)
parametres5 = list(ma = c(1), ar=c(0.9))
Xt7=arima.sim(model=parametres5,n=1000,rand.gen=rnorm)
plot.ts(Xt7)
par(mfrow=c(1,2)) #fenêtre graphique scindé en 2
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", main="autocorrélation empirique", col="blue", xlab = "h")
acf(Xt3,type="correlation",main="autocorrélation empirique")
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt3](h)))
abline(h=0)
acf(Xt3,type="correlation",main="autocorrélation empirique")
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt3](h)))
abline(h=0)
acf(Xt3,type="correlation",main="autocorrélation empirique")
parametres1 = list(ma=c(-1/3))
Xt3=arima.sim(model=parametres1,n=1000,rand.gen=rnorm)
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h', ylab=expression(rho[Xt3](h)))
abline(h=0)
acf(Xt3,type="correlation",main="autocorrélation empirique")
acf(Xt3,type="correlation",main="autocorrélation empirique")
N <- 1000
theta <- -1/3
Z1 <- rnorm(N+1)
Xt1 <- Z1[2:(N+1)] + theta*Z1[1:N]
plot.ts(Xt1)
p <- 1
init <- 2
phi <- 0.9
N0 <- N/3
set.seed(1234)
Z2 <- rnorm(N+N0,0,1)
Xt2 <- numeric (N+N0)
Xt2[1] <- init
for (t in 2:(N+N0)) {
Xt2[t] <- phi * Xt2[t-1] + Z2[t]
}
#X2_final <- Xt2[(N0+1):(N0+N)]
plot.ts(Xt2)
parametres1 = list(ma=c(-1/3))
Xt3=arima.sim(model=parametres1,n=1000,rand.gen=rnorm)
plot.ts(Xt3)
parametres2 = list(ar=c(0.9))
Xt4=arima.sim(model=parametres2,n=1000,rand.gen=rnorm)
plot.ts(Xt4)
parametres3 = list(ma=c(-12,12,144))
Xt5=arima.sim(model=parametres3,n=1000,rand.gen=rnorm)
plot.ts(Xt5)
parametres4 = list(ar=c(1/3, 1/2))
Xt6=arima.sim(model=parametres4,n=1000,rand.gen=rnorm)
plot.ts(Xt6)
parametres5 = list(ma = c(1), ar=c(0.9))
Xt7=arima.sim(model=parametres5,n=1000,rand.gen=rnorm)
plot.ts(Xt7)
par(mfrow=c(1,2)) #fenêtre graphique scindé en 2
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", main="autocorrélation empirique", col="blue", xlab = "h")
acf(Xt3,type="correlation",main="autocorrélation empirique")
parametres = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt8)
rho <- function(h,phi){phi^abs(h)}
rho_theo=rho(0:20,-0.8)
par(mfrow=c(1,2))
plot(0:20, rho_theo, col=1, type='h' ,main="autocorrélation
théorique",xlab='h',
yLab=expression(rho[Xt8](h)))
abline(h=0)
acf(Xt8,type="correlation", Lag.max=20, main="autocorrélation empirique")
parametres = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres,n=1000, rand.gen=rnorm)
plot.ts(Xt8)
rho <- function(h,phi){phi^abs(h)}
rho_theo=rho(0:20,-0.8)
par(mfrow=c(1,2))
plot(0:20, rho_theo, col=1, type='h' ,main="autocorrélation
théorique",xlab='h',
ylab=expression(rho[Xt8](h)))
abline(h=0)
acf(Xt8,type="correlation", Lag.max=20, main="autocorrélation empirique")
parametres = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres,n=1000, rand.gen=rnorm)
#plot.ts(Xt8)
rho <- function(h,phi){phi^abs(h)}
rho_theo=rho(0:20,-0.8)
par(mfrow=c(1,2))
plot(0:20, rho_theo, col=1, type='h' ,main="autocorrélation
théorique",xlab='h',
ylab=expression(rho[Xt8](h)))
abline(h=0)
acf(Xt8,type="correlation", Lag.max=20, main="autocorrélation empirique")
parametres = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres,n=1000, rand.gen=rnorm)
#plot.ts(Xt8)
rho <- function(h,phi){phi^abs(h)}
rho_theo=rho(0:20,-0.8)
par(mfrow=c(1,2))
plot(0:20, rho_theo, col=1, type='h' ,main="autocorrélation théorique",xlab='h', ylab=expression(rho[Xt8](h)))
abline(h=0)
acf(Xt8,type="correlation", Lag.max=20, main="autocorrélation empirique")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
acf(Xt8,type="correlation", Lag.max=20, main="autocorrélation empirique")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
acf(Xt8,type="correlation", lag.max=20, main="autocorrélation empirique")
parametres11= list(ar=c(-0.8, 1/6))
Xt = arima.sim(model=parametres11,n=1000, rand.gen=rnorm)
acf(Xt,type="correlation", Lag.max=20, main="autocorrélation empirique")
parametres7= list(ar=c(-0.8, 1/6))
Xt = arima.sim(model=parametres7,n=1000, rand.gen=rnorm)
acf(Xt,type="correlation", lag.max=20, main="autocorrélation empirique")
parametres7= list(ar=c(-0.8, 1/6))
Xt9 = arima.sim(model=parametres7,n=1000, rand.gen=rnorm)
acf(Xt9,type="correlation", lag.max=20, main="autocorrélation empirique")
N <- 1000
theta <- -1/3
Z1 <- rnorm(N+1)
Xt1 <- Z1[2:(N+1)] + theta*Z1[1:N]
plot.ts(Xt1)
p <- 1
init <- 2
phi <- 0.9
N0 <- N/3
set.seed(1234)
Z2 <- rnorm(N+N0,0,1)
Xt2 <- numeric (N+N0)
Xt2[1] <- init
for (t in 2:(N+N0)) {
Xt2[t] <- phi * Xt2[t-1] + Z2[t]
}
#X2_final <- Xt2[(N0+1):(N0+N)]
plot.ts(Xt2)
parametres1 = list(ma=c(-1/3))
Xt3=arima.sim(model=parametres1,n=1000,rand.gen=rnorm)
plot.ts(Xt3)
parametres2 = list(ar=c(0.9))
Xt4=arima.sim(model=parametres2,n=1000,rand.gen=rnorm)
plot.ts(Xt4)
parametres3 = list(ma=c(-12,12,144))
Xt5=arima.sim(model=parametres3,n=1000,rand.gen=rnorm)
plot.ts(Xt5)
parametres4 = list(ar=c(1/3, 1/2))
Xt6=arima.sim(model=parametres4,n=1000,rand.gen=rnorm)
plot.ts(Xt6)
parametres5 = list(ma = c(1), ar=c(0.9))
Xt7=arima.sim(model=parametres5,n=1000,rand.gen=rnorm)
plot.ts(Xt7)
par(mfrow=c(1,2)) #fenêtre graphique scindé en 2
plot(0:10,c(1,-0.3, rep(0,9)),col="red",type='h',main="autocorrélation théorique",xlab='h',
ylab=expression(rho[Xt1](h)))
abline(h=0)
acf(Xt1,type="correlation", main="autocorrélation empirique", col="blue", xlab = "h")
acf(Xt3,type="correlation",main="autocorrélation empirique")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
acf(Xt8,type="correlation", lag.max=20, main="autocorrélation empirique")
parametres7= list(ar=c(-0.8, 1/6))
Xt9 = arima.sim(model=parametres7,n=1000, rand.gen=rnorm)
acf(Xt9,type="correlation", lag.max=20, main="autocorrélation empirique")
parametres7= list(ar=c(-0.8, 1/6))
Xt9 = arima.sim(model=parametres7,n=1000, rand.gen=rnorm)
acf(Xt9,type="correlation", lag.max=20, main="autocorrélation empirique")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
acf(Xt8,type="partial", lag.max=20, main="autocorrélation empirique")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
acf(Xt8,type="partial", lag.max=20, main="autocorrélation partielle empirique")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
plot(1:10,c(-0.8, rep(0,9)),col=1,type='h',main="autocorrélation partielle théorique",xlab='h',
ylab=expression(rho[Xt8](h)))
abline(h=0)
acf(Xt8,type="partial", lag.max=20, main="autocorrélation partielle empirique", xlab = "h")
parametres6 = list(ar=c(-0.8))
Xt8=arima.sim(model=parametres6,n=1000, rand.gen=rnorm)
par(mfrow=c(1,2))
plot(1:10,c(-0.8, rep(0,9)),col=1,type='h',main="autocorrélation partielle théorique",xlab='h',
ylab=expression(rho[Xt8](h)))
abline(h=0)
acf(Xt8,type="partial", lag.max=20, main="autocorrélation partielle empirique", xlab = "h")
setwd("~/Desktop/Projet_abeilles")
install.packages(readxl)
install.packages("readxl")
poids <- read_excel("BD\Weight_2023_Sica_Confoux.xlsx")
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
library(readxl)
library(readxl)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
library(readxl)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
View(poids)
poids$heure <- as.POSIXct(data$heure, format="%Y-%m-%d %H:%M:%S")
library(readxl)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
poids$heure <- as.POSIXct(data$heure, format="%Y-%m-%d %H:%M:%S")
poids$heure <- as.POSIXct(poids$heure, format="%Y-%m-%d %H:%M:%S")
poids$date <- as.POSIXct(poids$date, format="%Y-%m-%d %H:%M:%S")
View(poids)
colnames(poids)[which(colnames(poids) == 'Domaine de Confoux (BeeRisk) - Poids de la ruche "Ruche 412"')] <- "poids_ruche"
View(poids)
library(readxl)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
poids$date <- as.POSIXct(poids$date, format="%Y-%m-%d %H:%M:%S")
colnames(poids)[which(colnames(poids) == 'Domaine de Confoux (BeeRisk) - Poids de la ruche "Ruche 412"')] <- "poids_ruche"
View(poids)
poids_restreint <- data[, c("date", `Domaine de Confoux (BeeRisk) - Poids de la ruche "Ruche 412"`)]
colnames(poids)
poids_restreint <- data[, c("date", `Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »`)]
poids_restreint <- data[, c("date", `Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »`)]
library(readxl)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
poids$date <- as.POSIXct(poids$date, format="%Y-%m-%d %H:%M:%S")
poids_restreint <- data[, c("date", `Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »`)]
poids_restreint <- data[, c("date", 'Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »')]
poids_restreint <- poids[, c("date", `Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »`)]
poids_restreint <- poids[, c("date", 'Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »')]
View(poids_restreint)
poids_restreint <- poids[as.Date(poids$date) == as.Date("2023-04-04"), c("date", 'Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »')]
View(poids_restreint)
#Renommer le nom de la colonne car elle contient des caractères spéciaux qui complique la suite
colnames(poids_restreint)[2] <- "poids_ruche"
View(poids_restreint)
#Renommer le nom de la colonne car elle contient des caractères spéciaux qui complique la suite
colnames(poids_restreint)[2] <- "poids_ruche412"
poids_restreint$date <- as.POSIXct(poids_restreint$date, format="%Y-%m-%d %H:%M:%S")
modele <- lm(poids_ruche ~ as.numeric(date), data = poids_restreint)
modele <- lm(poids_ruche412 ~ as.numeric(date), data = poids_restreint)
View(modele)
View(modele)
summary(modele)  # Afficher les résultats
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche)) +
geom_point() +  # Affiche les points des mesures
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ajoute la régression linéaire
labs(title = "Régression linéaire du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
library(ggplot2)
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche)) +
geom_point() +  # Affiche les points des mesures
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ajoute la régression linéaire
labs(title = "Régression linéaire du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche)) +
geom_point() +  # Affiche les points des mesures
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ajoute la régression linéaire
labs(title = "Régression linéaire du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +  # Affiche les points des mesures
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ajoute la régression linéaire
labs(title = "Régression linéaire du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point())  # Affiche les points des mesures
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() # Affiche les points des mesures
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() + # Affiche les points des mesures
geom_line()
#Tracé de la RL
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() + # Affiche les points des mesures
geom_line()
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412))
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line()
#Ajout de la tendance ?
geom_smooth(method = "lm", se = FALSE, color = "red")
#Ajout de la tendance ?
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ajoute la régression linéaire
labs(title = "Évolution du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
#Ajout de la tendance ?
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ajoute la régression linéaire
labs(title = "Évolution du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
#Ajout de la tendance ?
geom_smooth(method = "lm", color = "red") +  # Ajoute la régression linéaire
labs(title = "Évolution du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche ~ as.numeric(date), color = "red") +  # Ajoute la régression linéaire
labs(title = "Évolution du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
geom_smooth(method = "lm", formula = poids_ruche412 ~ as.numeric(date), color = "red") +  # Ajoute la régression linéaire
labs(title = "Évolution du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche412 ~ as.numeric(date), color = "red") +  # Ajoute la régression linéaire
labs(title = "Évolution du poids de la ruche sur la journée",
x = "Heure", y = "Poids de la ruche")
+
theme_minimal()  # Un style plus propre
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche412 ~ as.numeric(date), color = "red")
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche412 ~ as.numeric(date), se = FALSE,color = "red")
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche412 ~ date, se = FALSE,color = "red")
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche412 ~ date, se = FALSE,color = "red")
library(readxl)
library(ggplot2)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
#poids de la rûche 412 sur la journée du 04 avril 2023
poids_restreint <- poids[as.Date(poids$date) == as.Date("2023-04-04"), c("date", 'Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »')]
#Renommer le nom de la colonne car elle contient des caractères spéciaux qui complique la suite
colnames(poids_restreint)[2] <- "poids_ruche412"
#Tracé de la RL (geom_point trace les points, geom_line relie les points)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
#Ajout de la tendance ?
geom_smooth(method = "lm", formula = poids_ruche412 ~ date, se = FALSE,color = "red")
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red") +
labs(title = "Évolution du poids de la ruche avec tendance",
x = "Date", y = "Poids de la ruche")
library(readxl)
library(ggplot2)
poids <- read_excel("BD/Weight_2023_Sica_Confoux.xlsx")
#poids de la rûche 412 sur la journée du 04 avril 2023
poids_restreint <- poids[as.Date(poids$date) == as.Date("2023-04-04"),
c("date", 'Domaine de Confoux (BeeRisk) - Poids de la ruche « Ruche 412 »')]
#Renommer le nom de la colonne car elle contient des caractères spéciaux qui complique la suite
colnames(poids_restreint)[2] <- "poids_ruche412"
#Tracé du graphe
#(geom_point trace les points, geom_line relie les points, geom_smooth trace la droite de régression linéaire)
ggplot(poids_restreint, aes(x = date, y = poids_ruche412)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red") +
labs(title = "Évolution du poids de la ruche 412 le 04 avril 2023", x = "Heure", y = "Poids de la ruche")
